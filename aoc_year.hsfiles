{-# START_FILE package.yaml #-}
name:                {{name}}
version:             0.1.0.0
github:              "{{github-username}}{{^github-username}}heydtn{{/github-username}}/{{name}}"
author:              "{{author-name}}{{^author-name}}Nathaniel Heydt{{/author-name}}"
maintainer:          "{{author-email}}{{^author-email}}heydtn{{/author-email}}"
copyright:           "{{copyright}}{{^copyright}}{{year}}{{^year}}2019{{/year}} {{author-name}}{{^author-name}}Nathaniel Heydt{{/author-name}}{{/copyright}}"

# Metadata used when publishing your package
# synopsis:            Short description of your package
# category:            {{category}}{{^category}}Web{{/category}}

# To avoid duplicated efforts in documentation and dealing with the
# complications of embedding Haddock markup inside cabal files, it is
# common to point users to the README.md file.
description:         Please see the README on GitHub at <https://github.com/{{github-username}}{{^github-username}}heydtn{{/github-username}}/adventofcode-haskell/tree/master/2019/{{name}}#readme>

dependencies:
- base >= 4.7 && < 5
- fgl >= 5.7 && < 6
- parsec >= 3.1 && < 3.2
- containers >= 0.6 && < 0.7

executables:
  {{name}}-exe:
    main:                Main.hs
    source-dirs:         src
    ghc-options:
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N
    dependencies:
    - {{name}}

default-extensions:
  ApplicativeDo
  BangPatterns
  ConstraintKinds
  DataKinds
  DefaultSignatures
  DeriveFoldable
  DeriveFunctor
  DeriveGeneric
  DeriveLift
  DeriveTraversable
  DerivingStrategies
  EmptyCase
  ExistentialQuantification
  FlexibleContexts
  FlexibleInstances
  FunctionalDependencies
  GADTs
  GeneralizedNewtypeDeriving
  InstanceSigs
  KindSignatures
  LambdaCase
  MultiParamTypeClasses
  MultiWayIf
  NamedFieldPuns
  OverloadedStrings
  PatternSynonyms
  RankNTypes
  ScopedTypeVariables
  StandaloneDeriving
  TupleSections
  TypeApplications
  TypeFamilies
  TypeFamilyDependencies
  TypeOperators

{-# START_FILE .tool_versions #-}
haskell 8.8.1

{-# START_FILE src/Main.hs #-}
import Data.Char
import Data.List
import Data.Map as M
import Data.Tree as T
import Data.Graph.Inductive.Graph as G
import Control.Monad
import Control.Applicative
import Data.Either
import Text.Parsec (parse)
import Text.Parsec.String (Parser)
import Text.Parsec.Char
import Text.Parsec.Combinator

main = do
    f <- readFile "{{name}}.input"
